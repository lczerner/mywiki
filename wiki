#!/bin/bash

[ -z "$MYWIKI_CONFIG" ] && MYWIKI_CONFIG=~/.mywiki.config/

[ -f "$MYWIKI_CONFIG" ] && . $MYWIKI_CONFIG

[ -z "$DATA_DIR" ]	&& DATA_DIR=~/.mywiki/
[ -z "$HEAD_LINES" ]	&& HEAD_LINES=2
[ -z "$TEMPLATE_FILE" ]	&& TEMPLATE_FILE=${DATA_DIR}/.template
[ -z "$HIDDEN_TAG" ] && HIDDEN_TAG="--- HIDDEN ---"

create_template()
{
cat << EOF
TAGS:
DESCRIPTION:
EOF
}

error()
{
	echo $1
	exit 1
}

usage()
{
	echo "wiki.sh [new | edit | list | rm | <search terms> ]
	new <filename>		- create a new wiki file
	edit <filename>		- edit a wiki file
	rm <filename>		- remove a wiki file
	list			- list all wiki files
	<search terms>		- search for specified terms"
}

header()
{
	COLUMNS=$(tput cols)
	eval printf -- '-%.s' {1..$COLUMNS}
	echo
	title=$1
	tput bold
	printf "%*s\n" $(((${#title}+$COLUMNS)/2)) "$title"
	tput sgr0
	eval printf -- '-%.s' {1..$COLUMNS}
	echo
}

header_small()
{
	title=$1
	echo -e "\033[1m$title\033[0m"
}

git_pull()
{
	[ ! -d "$DATA_DIR/.git" ] && return
	(
	cd $DATA_DIR
	git pull
	)
}

git_add()
{
	[ ! -d "$DATA_DIR/.git" ] && return
	(
		cd $DATA_DIR
		[ -z "$1" ] && error "git: File to add to git repository was not specified"
		if [ ! -f "$1" ]; then
			git ls-files -d | grep -E "^${1}$" 2> /dev/null
			[ $? -ne 0 ] && error "git: File \"$1\" does not exist"
			op="Delete file"
		else
			op="Add new file"
			git ls-files | grep -E "^${1}$" 2> /dev/null
			[ $? -eq 0 ] && op="Update file"

		fi

		git add $1
		changes=`git --no-pager diff --cached | wc -l`
		[ "$changes" == "0" ] && return
		git commit -m "$op $1"
	)
}

git_push()
{
	[ ! -d "$DATA_DIR/.git" ] && return
	(
	cd $DATA_DIR
	git push
	)
}

new()
{
	if [ $# -ne 2 ]; then
		echo "Error: filename should be provided"
		usage
		exit 1
	fi
	filename=$2
	if [ -f ${DATA_DIR}/$filename ]; then
		echo "File \"$filename\" already exist!"
		exit 1
	fi
	echo "Creating new wiki entry \"$filename\""
	( $EDITOR -c "read $TEMPLATE_FILE" ${DATA_DIR}/$filename )
	if [ -f ${DATA_DIR}/$filename ]; then
		echo "New entry \"$filename\" was successfully created!"
		cat ${DATA_DIR}/$filename
		git_add $filename
	else
		echo "New entry \"$filename\" was NOT created!"
	fi
}

list()
{
	if [ $# -gt 1 ]; then
		echo "Error: unexpected arguments"
		usage
		exit 1
	fi
	for file in $(ls $DATA_DIR); do
		header $file
		head -n${HEAD_LINES} ${DATA_DIR}/$file | sed -e "s/\(.*\)/\t\1/"
	done
}

remove()
{
	if [ $# -ne 2 ]; then
		echo "Error: filename should be provided"
		usage
		exit 1
	fi
	filename=$2
	if [ -f ${DATA_DIR}/$filename ]; then
		echo "Removing \"$filename\"!"
		rm ${DATA_DIR}/$filename
		git_add $filename
	else
		echo "\"$filename\" entry does NOT exist!"
		exit 1
	fi
}

edit()
{
	if [ $# -ne 2 ]; then
		echo "Error: filename should be provided"
		usage
		exit 1
	fi
	filename=$2
	if [ -f ${DATA_DIR}/$filename ]; then
		( $EDITOR ${DATA_DIR}/$filename )
		git_add $filename
	else
		echo "\"$filename\" entry does NOT exist!"
		exit 1
	fi
}

do_append()
{
	if [ $# -lt 2 ]; then
		echo "Error: filename should be provided"
		usage
		exit 1
	fi
	filename=$2
	shift 2
	if [ -f ${DATA_DIR}/$filename ]; then
		echo $@ >> ${DATA_DIR}/$filename
		git_add $filename
	else
		echo "\"$filename\" entry does NOT exist!"
		exit 1
	fi
}

search()
{
	if [ $# -lt 1 ]; then
		echo "Error: Search words should be provided"
		usage
		exit 1
	fi
	string=`echo $@ | sed -e "s/ / -e /g"`
	echo "Searching for terms: $string"
	found=0
	for file in $(ls $DATA_DIR); do
		if [ "$file" != "$string" ]; then
			head -n1 ${DATA_DIR}/$file | grep -i -q -e $string
			[ $? -ne 0 ] && continue
		fi
		header $file
		sed "s/\(.*\)/\t\1/;/${HIDDEN_TAG}/Q" ${DATA_DIR}/$file
		found=$(($found+1))
	done
	if [ $found -eq 0 ]; then
		echo "Nothing was found!"
	fi
}


if [ ! -d $DATA_DIR ]; then
	mkdir $DATA_DIR 2>&1> /dev/null || error "Can not create $DATA_DIR"
fi

git_pull

if [ ! -f $TEMPLATE_FILE ]; then
	create_template > $TEMPLATE_FILE
fi

CMD=$1

case $CMD in
	new | add)	new $@;;
	edit)		edit $@;;
	list)		list $@;;
	append)		do_append $@;;
	rm | remove)	remove $@;;
esac

case $CMD in
	new|edit|rm|remove|add|append)
		git_push
		exit 0;;
	list)
		exit 0;;
esac

if [ $# -lt 1 ]; then
	list
else
	search $@
fi

exit 0
